import arcade
import math

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
SCREEN_TITLE = "Simple Game with Moving Character"
CHARACTER_SIZE = 50
CHARACTER_SPEED = 5
STICK_LENGTH = 30
STICK_WIDTH = 5
PROJECTILE_SPEED = 10
PROJECTILE_SIZE = 10
MAX_HEALTH = 100

class Projectile(arcade.Sprite):
    def __init__(self, start_x, start_y, angle, color):
        super().__init__()
        self.center_x = start_x
        self.center_y = start_y
        self.angle = angle

        # Set the texture of the projectile based on color
        if color == "blue":
            self.texture = arcade.make_soft_square_texture(PROJECTILE_SIZE, arcade.color.BLUE, 255, 255)
        elif color == "red":
            self.texture = arcade.make_soft_square_texture(PROJECTILE_SIZE, arcade.color.RED, 255, 255)
        else:
            self.texture = arcade.make_soft_square_texture(PROJECTILE_SIZE, arcade.color.WHITE, 255, 255)  # Default to white

        # Set the velocity based on the angle
        self.change_x = PROJECTILE_SPEED * math.cos(math.radians(self.angle))
        self.change_y = PROJECTILE_SPEED * math.sin(math.radians(self.angle))

    def update(self):
        # Move the projectile
        self.center_x += self.change_x
        self.center_y += self.change_y

        # Remove the projectile if it goes off-screen
        if (self.center_x < 0 or self.center_x > SCREEN_WIDTH or
                self.center_y < 0 or self.center_y > SCREEN_HEIGHT):
            self.remove_from_sprite_lists()

class TriangleObstacle(arcade.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.center_x = x
        self.center_y = y

        # Define triangle vertices
        self.vertices = [
            (-30, -30),
            (30, -30),
            (0, 30)
        ]

    def draw(self):
        arcade.draw_triangle_filled(
            self.center_x + self.vertices[0][0], self.center_y + self.vertices[0][1],
            self.center_x + self.vertices[1][0], self.center_y + self.vertices[1][1],
            self.center_x + self.vertices[2][0], self.center_y + self.vertices[2][1],
            arcade.color.BLACK  # Change color to black
        )

class MyGame(arcade.Window):
    def __init__(self):
        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
        
        # Set the background color
        arcade.set_background_color(arcade.color.AMAZON)

        # Initialize the player position and angle
        self.player_x = 64
        self.player_y = 64
        self.player_angle = 0

        # Player velocity
        self.player_dx = 0
        self.player_dy = 0

        # Initialize the wall list, projectile list, and obstacle list
        self.wall_list = None
        self.projectile_list = None
        self.obstacle_list = None

        # Mouse position
        self._mouse_x = 0
        self._mouse_y = 0

        # Initialize health
        self.health = MAX_HEALTH

        # Initialize UI elements
        self.health_bar_width = 200
        self.health_bar_height = 20

        # Game over flag
        self.game_over = False

        # Projectile color selection
        self.projectile_color = "blue"  # Default color

    def setup(self):
        # Sprite list for walls, projectiles, and obstacles
        self.wall_list = arcade.SpriteList()
        self.projectile_list = arcade.SpriteList()
        self.obstacle_list = arcade.SpriteList()

        # Create walls (obstacles)
        wall = arcade.Sprite(":resources:images/tiles/boxCrate_double.png", 0.5)
        wall.center_x = 300
        wall.center_y = 300
        self.wall_list.append(wall)

        wall = arcade.Sprite(":resources:images/tiles/boxCrate_double.png", 0.5)
        wall.center_x = 400
        wall.center_y = 300
        self.wall_list.append(wall)

        wall = arcade.Sprite(":resources:images/tiles/boxCrate_double.png", 0.5)
        wall.center_x = 500
        wall.center_y = 300
        self.wall_list.append(wall)

        # Create additional obstacles (different shapes)
        circle_obstacle = arcade.SpriteCircle(25, arcade.color.BLACK)  # Change color to black
        circle_obstacle.center_x = 200
        circle_obstacle.center_y = 200
        self.obstacle_list.append(circle_obstacle)

        triangle_obstacle = TriangleObstacle(600, 200)
        self.obstacle_list.append(triangle_obstacle)

    def on_draw(self):
        arcade.start_render()

        if not self.game_over:
            # Draw the player as a blue square
            arcade.draw_rectangle_filled(self.player_x, self.player_y, CHARACTER_SIZE, CHARACTER_SIZE, arcade.color.BLUE, self.player_angle)

            # Calculate stick end position
            stick_end_x = self.player_x + (CHARACTER_SIZE / 2 + STICK_LENGTH) * math.cos(math.radians(self.player_angle))
            stick_end_y = self.player_y + (CHARACTER_SIZE / 2 + STICK_LENGTH) * math.sin(math.radians(self.player_angle))

            # Draw the black stick extending outward from the face of the player
            arcade.draw_line(self.player_x, self.player_y, stick_end_x, stick_end_y, arcade.color.BLACK, STICK_WIDTH)

            # Draw walls, projectiles, and obstacles
            self.wall_list.draw()
            self.projectile_list.draw()
            self.obstacle_list.draw()

            # Draw health bar
            arcade.draw_rectangle_filled(10 + self.health_bar_width / 2, SCREEN_HEIGHT - 10 - self.health_bar_height / 2,
                                         self.health_bar_width, self.health_bar_height, arcade.color.BLACK)
            arcade.draw_rectangle_filled(10 + self.health / MAX_HEALTH * self.health_bar_width / 2, 
                                         SCREEN_HEIGHT - 10 - self.health_bar_height / 2,
                                         self.health / MAX_HEALTH * self.health_bar_width, self.health_bar_height, arcade.color.GREEN)

            # Draw projectile selection icons
            icon_size = 30
            icon_spacing = 5
            icon_left = 10
            icon_bottom = 10

            # Blue rectangle icon (bound to key '1')
            arcade.draw_rectangle_filled(icon_left + icon_size / 2, icon_bottom + icon_size / 2, icon_size, icon_size, arcade.color.GRAY + (180,))
            arcade.draw_rectangle_filled(icon_left + icon_size / 2, icon_bottom + icon_size / 2, icon_size - 2, icon_size - 2, arcade.color.BLUE)

            # Red rectangle icon (bound to key '2')
            arcade.draw_rectangle_filled(icon_left + icon_size + icon_spacing + icon_size / 2, icon_bottom + icon_size / 2, icon_size, icon_size, arcade.color.GRAY + (180,))
            arcade.draw_rectangle_filled(icon_left + icon_size + icon_spacing + icon_size / 2, icon_bottom + icon_size / 2, icon_size - 2, icon_size - 2, arcade.color.RED)

        else:
            # Draw game over text
            arcade.draw_text("Game Over", SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2,
                             arcade.color.RED, font_size=60, anchor_x="center", anchor_y="center")

    def on_update(self, delta_time):
        if not self.game_over:
            # Update the player position
            self.player_x += self.player_dx
            self.player_y += self.player_dy

            # Boundary check for the player
            if self.player_x - CHARACTER_SIZE / 2 < 0:
                self.player_x = CHARACTER_SIZE / 2
            elif self.player_x + CHARACTER_SIZE / 2 > SCREEN_WIDTH:
                self.player_x = SCREEN_WIDTH - CHARACTER_SIZE / 2

            if self.player_y - CHARACTER_SIZE / 2 < 0:
                self.player_y = CHARACTER_SIZE / 2
            elif self.player_y + CHARACTER_SIZE / 2 > SCREEN_HEIGHT:
                self.player_y = SCREEN_HEIGHT - CHARACTER_SIZE / 2

            # Create a temporary sprite for collision detection
            player_sprite = arcade.Sprite()
            player_sprite.center_x = self.player_x
            player_sprite.center_y = self.player_y
            player_sprite.width = CHARACTER_SIZE
            player_sprite.height = CHARACTER_SIZE

            # Check for collisions with walls and obstacles
            if arcade.check_for_collision_with_list(player_sprite, self.wall_list) or \
                    arcade.check_for_collision_with_list(player_sprite, self.obstacle_list):
                # Undo the movement
                self.player_x -= self.player_dx
                self.player_y -= self.player_dy

                # Decrease health on collision
                self.health -= 5
                if self.health < 0:
                    self.health = 0
                    self.game_over = True

            # Calculate the angle between the player and the mouse
            mouse_x, mouse_y = self._mouse_x, self._mouse_y
            dx = mouse_x - self.player_x
            dy = mouse_y - self.player_y
            self.player_angle = math.degrees(math.atan2(dy, dx))

            # Update projectiles
            self.projectile_list.update()

            # Check for collisions between projectiles and walls
            for projectile in self.projectile_list:
                if arcade.check_for_collision_with_list(projectile, self.wall_list):
                    projectile.remove_from_sprite_lists()

            # Check for collisions between projectiles and obstacles
            for projectile in self.projectile_list:
                hit_list = arcade.check_for_collision_with_list(projectile, self.obstacle_list)
                for obstacle in hit_list:
                    obstacle.remove_from_sprite_lists()
                    projectile.remove_from_sprite_lists()

    def on_key_press(self, key, modifiers):
        if key == arcade.key.W:
            self.player_dy = CHARACTER_SPEED
        elif key == arcade.key.S:
            self.player_dy = -CHARACTER_SPEED
        elif key == arcade.key.A:
            self.player_dx = -CHARACTER_SPEED
        elif key == arcade.key.D:
            self.player_dx = CHARACTER_SPEED
        elif key == arcade.key.KEY_1:
            self.projectile_color = "blue"
        elif key == arcade.key.KEY_2:
            self.projectile_color = "red"

    def on_key_release(self, key, modifiers):
        if key in [arcade.key.W, arcade.key.S]:
            self.player_dy = 0
        elif key in [arcade.key.A, arcade.key.D]:
            self.player_dx = 0

    def on_mouse_motion(self, x, y, dx, dy):
        self._mouse_x = x
        self._mouse_y = y

    def on_mouse_press(self, x, y, button, modifiers):
        if button == arcade.MOUSE_BUTTON_LEFT:
            # Calculate the stick end position
            stick_end_x = self.player_x + (CHARACTER_SIZE / 2 + STICK_LENGTH) * math.cos(math.radians(self.player_angle))
            stick_end_y = self.player_y + (CHARACTER_SIZE / 2 + STICK_LENGTH) * math.sin(math.radians(self.player_angle))

            # Create and add the projectile
            projectile = Projectile(stick_end_x, stick_end_y, self.player_angle, self.projectile_color)
            self.projectile_list.append(projectile)

def main():
    game = MyGame()
    game.setup()
    arcade.run()

if __name__ == "__main__":
    main()
